#$if Bash
set editing-mode vi

# duration readline will wait for a character
# set keyseq-timeout 600

#
# for vim
#set convert-meta on   # russian input don't work
# Standard options {{{
# To the extent possible under law, the author(s) have dedicated all 
# copyright and related and neighboring rights to this software to the 
# public domain worldwide. This software is distributed without any warranty. 
# You should have received a copy of the CC0 Public Domain Dedication along 
# with this software. 
# If not, see <http://creativecommons.org/publicdomain/zero/1.0/>. 

# base-files version 4.2-4

# ~/.inputrc: readline initialization file.

# The latest version as installed by the Cygwin Setup program can
# always be found at /etc/defaults/etc/skel/.inputrc

# Modifying /etc/skel/.inputrc directly will prevent
# setup from updating it.

# The copy in your home directory (~/.inputrc) is yours, please
# feel free to customise it to create a shell
# environment to your liking.  If you feel a change
# would be benifitial to all, please feel free to send
# a patch to the cygwin mailing list.


# the following line is actually
# equivalent to "\C-?": delete-char
#"\e[3~": delete-char

# VT
#"\e[1~": beginning-of-line
#"\e[4~": end-of-line

# kvt
#"\e[H": beginning-of-line
#"\e[F": end-of-line

# rxvt and konsole (i.e. the KDE-app...)
#"\e[7~": beginning-of-line
#"\e[8~": end-of-line

# VT220
#"\eOH": beginning-of-line
#"\eOF": end-of-line

# Allow 8-bit input/output
#set meta-flag on
#set convert-meta off
#set input-meta on
#set output-meta on
# $if Bash
  # Don't ring bell on completion
  #set bell-style none

  # or, don't beep at me - show me
  #set bell-style visible

  # Filename completion/expansion
  #set completion-ignore-case on
  #set show-all-if-ambiguous on

  # Expand homedir name
  #set expand-tilde on

  # Append "/" to all dirnames
  #set mark-directories on
  #set mark-symlinked-directories on

  # Match all files
  #set match-hidden-files on

  # 'Magic Space'
  # Insert a space character then performs
  # a history expansion in the line
  #Space: magic-space
# $endif
#}}}

# Emacs style {{{

$if mode=emacs
# Pressing tab will list all completions & select the first one. Pressing it 
# again will cycle through available completions.  (TAB)
TAB: menu-complete
# Show all completions as soon as I press tab, even if there's more than one
set show-all-if-ambiguous on
# Ignore case
set completion-ignore-case on
# on menu-complete, first display the common prefix, then cycle through the 
# options when hitting TAB
#set menu-complete-display-prefix on
#"[A": history-search-backward
#"[B": history-search-forward
"\C-k": history-search-backward
"\C-j": history-search-forward

$if bash
    "\ef": shell-forward-word
    "\eb": shell-backward-word
    "\ed": shell-kill-word
    "\eF": forward-word
    "\eB": backward-word
$else
    "\ef": vi-forward-bigword
    "\eb": vi-backward-bigword
    "\ed": kill-word
    "\eF": vi-forward-word
    "\eB": vi-backward-word
$endif

"\eY": copy-forward-word
"\ey": copy-backward-word
"\ek": kill-line
"\e?": yank-pop
"\e\e": "\C-a\ek"   # Two escapes clear command line.

"\eU": upcase-word
"\eL": downcase-word
"\eC": capitalize-word
"\eu": "\eB\eU"
"\eu2": "\e2\eB\e2\eU"
"\eu3": "\e3\eB\e3\eU"
"\eu4": "\e4\eB\e4\eU"
"\eu5": "\e5\eB\e5\eU"
"\eu6": "\e6\eB\e6\eU"
"\eu7": "\e7\eB\e7\eU"
"\eu8": "\e8\eB\e8\eU"
"\eu9": "\e9\eB\e9\eU"
"\el": "\eB\eL"
"\el2": "\e2\eB\e2\eL"
"\el3": "\e3\eB\e3\eL"
"\el4": "\e4\eB\e4\eL"
"\el5": "\e5\eB\e5\eL"
"\el6": "\e6\eB\e6\eL"
"\el7": "\e7\eB\e7\eL"
"\el8": "\e8\eB\e8\eL"
"\el9": "\e9\eB\e9\eL"
"\ec": "\eB\eC"
"\ec2": "\e2\eB\e2\eC"
"\ec3": "\e3\eB\e3\eC"
"\ec4": "\e4\eB\e4\eC"
"\ec5": "\e5\eB\e5\eC"
"\ec6": "\e6\eB\e6\eC"
"\ec7": "\e7\eB\e7\eC"
"\ec8": "\e8\eB\e8\eC"
"\ec9": "\e9\eB\e9\eC"

# Delete within surround {{{
"\e'": "''\C-b"
"\e\"": "\"\"\C-b"
"\e(": "()\C-b"
"\e[": "[]\C-b"
"\e{": "{}\C-b"
"\e<": "<>\C-b"
"\e;": ";;\C-b"
"\e:": "::\C-b"
"\e`": "``\C-b"
"\e/": "//\C-b"
"\ee": "\C-]\"\e"
"\ea": "\C-]\'\e"
#}}}
$endif
#}}}

$if mode=vi

"\e": abort

# Vim style {{{

# Show all completions as soon as I press tab, even if there's more than one
set show-all-if-ambiguous on
# Ignore case
set completion-ignore-case on
# Pressing tab will list all completions & select the first one. Pressing it 
# again will cycle through available completions.  (TAB)
TAB: menu-complete
#}}}

# Keymaps vi-command {{{

# Keymaps for when we're in command mode (e.g., after hitting C-o)
set keymap vi-command

#Keyboard Macros{{{
#Begin saving the characters typed into the current keyboard macro.
#"qw": start-kbd-macro

#Stop saving the characters typed into the current keyboard macro and save the definition.
#"q": end-kbd-macro

#Re-execute the last keyboard macro defined, by making the characters in the macro appear as if typed at the keyboard.
#"@w": call-last-kbd-macro

#Print the last keboard macro defined in a format suitable for the inputrc file.
#"\C-z\C-p": print-last-kbd-macro
#}}}

# Surround {{{
"ci\"": "F\"ldt\"i"
"ci`": "F`ldt`i"
"ci\'": "F\'ldt\'i"
"ci[": "F[ldt]i"
"ci{": "F{ldt}i"
"ci(": "F(ldt)i"
"ci<": "F<ldt>i"
"ci/": "F/ldt/i"
"ci,": "F,ldt,i"
"ci.": "F.ldt.i"
"ci?": "F?ldt?i"
"ci!": "F!ldt!i"
"ci@": "F@ldt@i"
"ci$": "F$ldt$i"
"ci%": "F%ldt%i"
"ci^": "F^ldt^i"
"ci&": "F&ldt&i"
"ci*": "F*ldt*i"
"ci-": "F-ldt-i"
"ci_": "F_ldt_i"
"ci=": "F=ldt=i"
"ci+": "F+ldt+i"
"ci ": "F ldt i"
"ci\#": "F\#ldt\#i"
"ci;": "F;ldt;i"
"ci:": "F:ldt:i"
"ci|": "F|ldt|i"
"ci\\": "F\\ldt\\i"
#}}}

# change case {{{
"gU": upcase-word
"gu": downcase-word
"gC": capitalize-word
"gUU": "50gUa"
"guu": "50gua"
"gCC": "50gCa"
#}}}

#Delete letters till space from current position cursor
"E": "ldt a"

# Two escapes clear command line.
"\e\e": "\e0\C-ki"

"K": beginning-of-history
"J": end-of-history

# Insert the arguments from the last command
#"p": "iВ !!*\r"
#}}}

# Keymaps vi-insert {{{

set keymap vi-insert
"\C-o": vi-movement-mode
# Two escapes clear command line.
"\e\e": "\C-oddi"
# escape
"jj": vi-movement-mode

# Emacs style within vi mode {{{

$if bash
    "\eF": shell-forward-word
    "\eB": shell-backward-word
    # "\ed": shell-kill-word
    "\ef": forward-word
    "\eb": backward-word
$else
    "\eF": vi-forward-bigword
    "\eB": vi-backward-bigword
    # "\ed": kill-word
    "\ef": vi-forward-word
    "\eb": vi-backward-word

    # change case {{{
    "\eU": upcase-word
    "\eL": downcase-word
    "\eC": capitalize-word
    "\eu": "\C-obgUwa"
    "\e\C-u": "\C-ogUU"
    "\eu2": "\C-o2b2gUwa"
    "\eu3": "\C-o3b3gUwa"
    "\eu4": "\C-o4b4gUwa"
    "\eu5": "\C-o5b5gUwa"
    "\eu6": "\C-o6b6gUwa"
    "\eu7": "\C-o7b7gUwa"
    "\eu8": "\C-o8b8gUwa"
    "\eu9": "\C-o9b9gUwa"
    "\el": "\C-obguwa"
    "\e\C-l": "\C-oguu"
    "\el2": "\C-o2b2guwa"
    "\el3": "\C-o3b3guwa"
    "\el4": "\C-o4b4guwa"
    "\el5": "\C-o5b5guwa"
    "\el6": "\C-o6b6guwa"
    "\el7": "\C-o7b7guwa"
    "\el8": "\C-o8b8guwa"
    "\el9": "\C-o9b9guwa"
    "\ec": "\C-obgCwa"
    "\eG": "\C-ogCC"
    "\ec2": "\C-o2b2gCwa"
    "\ec3": "\C-o3b3gCwa"
    "\ec4": "\C-o4b4gCwa"
    "\ec5": "\C-o5b5gCwa"
    "\ec6": "\C-o6b6gCwa"
    "\ec7": "\C-o7b7gCwa"
    "\ec8": "\C-o8b8gCwa"
    "\ec9": "\C-o9b9gCwa"
    #}}}

    # SURROUND {{{
    "\e'": "''\C-oi"
    "\e\"": "\"\"\C-oi"
    "\e(": "()\C-oi"
    "\e(e": "(  )\C-ohi"
    "\e(E": "(())\C-ohi"
    "\e[": "[]\C-oi"
    "\e[e": "[[  ]]\C-o2hi"
    "\e[E": "[[]]\C-ohi"
    "\e{": "{}\C-oi"
    "\e{e": "{  }\C-ohi"
    "\e{E": "{{}}\C-ohi"
    "\e<": "<>\C-oi"
    "\e;": ";;\C-oi"
    "\e:": "::\C-oi"
    "\e`": "``\C-oi"
    "\e/": "//\C-oi"
    "\e\\": "\\\\\C-oi"
    "\ee": "\C-]\"\e"
    "\ea": "\C-]\'\e"
    "\eif": "if ;then ; fi;\C-o4bi"
    "\eor": "for i in ; { ; }\C-o3bi"
    #}}}

    # change, delete surrounding {{{
    "\eS": "\C-oF'r\"f'r\"a"
    "\es": "\C-oF\"r'f\"r'a"
    "\ed'": "\C-oF'xf'xi"
    "\ed\"": "\C-oF\"xf\"xi"
    "\ed{": "\C-oF{xf}xa"
    "\ed[": "\C-oF[xf]xa"
    "\ed(": "\C-oF(xf)xa"
    "\ed<": "\C-oF<xf>xa"
    "\ed`": "\C-oF`xf`xa"
    "\ed": "\C-o2s"
    "\eh": "\C-h\C-d"
    #}}}

    # find paratheses{{{
    "\C-s": "\C-o$i"
    "\C-s)": "\C-of)a"
    "\C-s)\e": "\C-oF)a"
    "\C-s(": "\C-of(i"
    "\C-s(\e": "\C-oF(i"
    "\C-s}": "\C-of}a"
    "\C-s{": "\C-of{i"
    "\C-s}\e": "\C-oF}a"
    "\C-s{\e": "\C-oF{i"
    "\C-s]": "\C-of]a"
    "\C-s[": "\C-of[i"
    "\C-s]\e": "\C-oF]a"
    "\C-s[\e": "\C-oF[i"
    "\C-s>": "\C-of>a"
    "\C-s<": "\C-of<i"
    "\C-s>\e": "\C-oF>a"
    "\C-s<\e": "\C-oF<i"
    #}}}

$endif

"\eY": copy-forward-word
"\ey": copy-backward-word
"\ek": kill-line
"\e?": yank-pop

# change case {{{
"\eU": upcase-word
"\eL": downcase-word
"\eC": capitalize-word
"\eu": "\C-obgUwa"
"\e\C-u": "\C-ogUU"
"\eu2": "\C-o2b2gUwa"
"\eu3": "\C-o3b3gUwa"
"\eu4": "\C-o4b4gUwa"
"\eu5": "\C-o5b5gUwa"
"\eu6": "\C-o6b6gUwa"
"\eu7": "\C-o7b7gUwa"
"\eu8": "\C-o8b8gUwa"
"\eu9": "\C-o9b9gUwa"
"\el": "\C-obguwa"
"\e\C-l": "\C-oguu"
"\el2": "\C-o2b2guwa"
"\el3": "\C-o3b3guwa"
"\el4": "\C-o4b4guwa"
"\el5": "\C-o5b5guwa"
"\el6": "\C-o6b6guwa"
"\el7": "\C-o7b7guwa"
"\el8": "\C-o8b8guwa"
"\el9": "\C-o9b9guwa"
"\ec": "\C-obgCwa"
"\eG": "\C-ogCC"
"\ec2": "\C-o2b2gCwa"
"\ec3": "\C-o3b3gCwa"
"\ec4": "\C-o4b4gCwa"
"\ec5": "\C-o5b5gCwa"
"\ec6": "\C-o6b6gCwa"
"\ec7": "\C-o7b7gCwa"
"\ec8": "\C-o8b8gCwa"
"\ec9": "\C-o9b9gCwa"
#}}}

# SURROUND {{{
"\e'": "''\C-oi"
"\e\"": "\"\"\C-oi"
"\e(": "()\C-oi"
"\e(e": "(  )\C-ohi"
"\e(E": "(())\C-ohi"
"\e[": "[]\C-oi"
"\e[e": "[[  ]]\C-o2hi"
"\e[E": "[[]]\C-ohi"
"\e{": "{}\C-oi"
"\e{e": "{  }\C-ohi"
"\e{E": "{{}}\C-ohi"
"\e<": "<>\C-oi"
"\e;": ";;\C-oi"
"\e:": "::\C-oi"
"\e`": "``\C-oi"
"\e/": "//\C-oi"
"\e\\": "\\\\\C-oi"
"\ee": "\C-]\"\e"
"\ea": "\C-]\'\e"
"\eif": "if ;then ; fi;\C-o4bi"
"\eor": "for i in ; { ; }\C-o3bi"
#}}}

# change, delete surrounding {{{
"\eS": "\C-oF'r\"f'r\"a"
"\es": "\C-oF\"r'f\"r'a"
"\ed'": "\C-oF'xf'xi"
"\ed\"": "\C-oF\"xf\"xi"
"\ed{": "\C-oF{xf}xa"
"\ed[": "\C-oF[xf]xa"
"\ed(": "\C-oF(xf)xa"
"\ed<": "\C-oF<xf>xa"
"\ed`": "\C-oF`xf`xa"
"\ed": "\C-o2s"
# "\eh": "\C-h\C-d"
#}}}

# find paratheses{{{
"\C-s": "\C-o$i"
"\C-s)": "\C-of)a"
"\C-s)\e": "\C-oF)a"
"\C-s(": "\C-of(i"
"\C-s(\e": "\C-oF(i"
"\C-s}": "\C-of}a"
"\C-s{": "\C-of{i"
"\C-s}\e": "\C-oF}a"
"\C-s{\e": "\C-oF{i"
"\C-s]": "\C-of]a"
"\C-s[": "\C-of[i"
"\C-s]\e": "\C-oF]a"
"\C-s[\e": "\C-oF[i"
"\C-s>": "\C-of>a"
"\C-s<": "\C-of<i"
"\C-s>\e": "\C-oF>a"
"\C-s<\e": "\C-oF<i"
#}}}

#}}}

# rest keys {{{

# "\C-g": abort
# "\C-x\C-g": abort
# "\e\C-g": abort
"\C-m": accept-line
# alias-expand-line (not bound)
# arrow-key-prefix (not bound)
# backward-byte (not bound)
"\C-b": backward-char
"\eOD": backward-char
"\e[D": backward-char
"\C-h": backward-delete-char
"\C-?": backward-delete-char
"\C-x\C-?": backward-kill-line
"\e\C-h": backward-kill-word
"\e\C-?": backward-kill-word
"\eb": backward-word
# beginning-of-history (not bound)
"\C-a": beginning-of-line
"\eOH": beginning-of-line
"\e[1~": beginning-of-line
"\e[H": beginning-of-line
"\C-xe": call-last-kbd-macro
"\eC": capitalize-word
"\C-]": character-search
"\e\C-]": character-search-backward
"\C-l": clear-screen
# complete (not bound)
"\e!": complete-command
# complete-filename (not bound)
"\e@": complete-hostname
# complete-into-braces (not bound)
"\e~": complete-username
"\e$": complete-variable
"\ey": copy-backward-word
"\eY": copy-forward-word
# copy-region-as-kill (not bound)
# dabbrev-expand (not bound)
"\C-d": delete-char
"\e[3~": delete-char
# delete-char-or-list (not bound)
"\e-": delete-horizontal-space
# "\e-": digit-argument
"\e0": digit-argument
"\e1": digit-argument
"\e2": digit-argument
"\e3": digit-argument
"\e4": digit-argument
"\e5": digit-argument
"\e6": digit-argument
"\e7": digit-argument
"\e8": digit-argument
"\e9": digit-argument
"\C-x\C-v": display-shell-version

# do-lowercase-version {{{
# "\c-xa": do-lowercase-version
# "\c-xb": do-lowercase-version
# "\c-xc": do-lowercase-version
# "\c-xd": do-lowercase-version
# "\c-xe": do-lowercase-version
# "\c-xf": do-lowercase-version
# "\c-xg": do-lowercase-version
# "\c-xh": do-lowercase-version
# "\c-xi": do-lowercase-version
# "\c-xj": do-lowercase-version
# "\c-xk": do-lowercase-version
# "\c-xl": do-lowercase-version
# "\c-xm": do-lowercase-version
# "\c-xn": do-lowercase-version
# "\c-xo": do-lowercase-version
# "\c-xp": do-lowercase-version
# "\c-xq": do-lowercase-version
# "\c-xr": do-lowercase-version
# "\c-xs": do-lowercase-version
# "\c-xt": do-lowercase-version
# "\c-xu": do-lowercase-version
# "\c-xv": do-lowercase-version
# "\c-xw": do-lowercase-version
# "\c-xx": do-lowercase-version
# "\c-xy": do-lowercase-version
# "\c-xz": do-lowercase-version
# "\ea": do-lowercase-version
# "\ed": do-lowercase-version
# "\ee": do-lowercase-version
# "\eg": do-lowercase-version
# "\eh": do-lowercase-version
# "\ei": do-lowercase-version
# "\ej": do-lowercase-version
# "\ek": do-lowercase-version
# "\em": do-lowercase-version
# "\en": do-lowercase-version
# "\ep": do-lowercase-version
# "\eq": do-lowercase-version
# "\er": do-lowercase-version
# "\es": do-lowercase-version
# "\et": do-lowercase-version
# "\ev": do-lowercase-version
# "\ew": do-lowercase-version
# "\ex": do-lowercase-version
# "\ez": do-lowercase-version
#}}}

"\eL": downcase-word
# dump-functions (not bound)
# dump-macros (not bound)
# dump-variables (not bound)
# "\e\C-i": dynamic-complete-history
"\C-x\C-e": edit-and-execute-command
# emacs-editing-mode (not bound)
"\C-x)": end-kbd-macro
"\e\C-j": end-of-history
"\C-e": end-of-line
"\eOF": end-of-line
"\e[4~": end-of-line
"\e[F": end-of-line
"\C-x\C-x": exchange-point-and-mark
# forward-backward-delete-char (not bound)
# forward-byte (not bound)
"\C-f": forward-char
"\eOC": forward-char
"\e[C": forward-char
"\ef": forward-word
"\eg": glob-complete-word
"\C-x*": glob-expand-word
"\C-xg": glob-list-expansions
# history-and-alias-expand-line (not bound)
"\e^": history-expand-line
"\C-k": history-search-backward
"\C-j": history-search-forward
# history-substring-search-backward (not bound)
# history-substring-search-forward (not bound)
"\e#": insert-comment
"\e*": insert-completions
"\ek": kill-line
# kill-region (not bound)
# kill-whole-line (not bound)
# kill-word (not bound)
# magic-space (not bound)
# "\C-i": menu-complete
# menu-complete-backward (not bound)
"\C-n": next-history
"\eOB": next-history
"\e[B": next-history
"\en": non-incremental-forward-search-history
# non-incremental-forward-search-history-again (not bound)
"\ep": non-incremental-reverse-search-history
# non-incremental-reverse-search-history-again (not bound)
# old-menu-complete (not bound)
# "\C-o": operate-and-get-next
# overwrite-mode (not bound)
# paste-from-clipboard (not bound)
"\C-x!": possible-command-completions
"\e=": possible-completions
"\C-x/": possible-filename-completions
"\C-x@": possible-hostname-completions
"\C-x~": possible-username-completions
"\C-x$": possible-variable-completions
"\C-p": previous-history
"\eOA": previous-history
"\e[A": previous-history
# print-last-kbd-macro (not bound)
# "\C-q": quoted-insert
"\C-v": quoted-insert
# redraw-current-line (not bound)
"\C-x\C-r": re-read-init-file
"\e\C-s": reverse-search-history
# "\C-s": forward-search-history
# "\e\C-r": revert-line
# "\er": revert-line
"\C-@": set-mark
"\e ": set-mark
# shell-backward-kill-word (not bound)
"\eB": shell-backward-word
"\e\C-e": shell-expand-line
"\eF": shell-forward-word
"\e\C-d": shell-kill-word
# skip-csi-sequence (not bound)
"\C-x(": start-kbd-macro
# tab-insert (not bound)
"\e&": tilde-expand
"\C-t": transpose-chars
"\e\C-t": transpose-words
# tty-status (not bound)
"\C-x\C-u": undo
"\C-_": undo
# universal-argument (not bound)
# unix-filename-rubout (not bound)
"\C-u": unix-line-discard
"\C-w": unix-word-rubout
"\eU": upcase-word
"\C-y": yank
"\e>": insert-last-argument
"\e.": yank-last-arg
# "\e_": yank-last-arg
"\e\C-y": yank-nth-arg
"\e?": yank-pop
# 
# #}}}

#}}}

$endif

# # Keymaps vi-insert DEPRECATED {{{
#
# # Keymaps for when we're in insert (i.e., typing stuff in) mode
# set keymap vi-insert
#
#
# #Delete the character behind the cursor. A numeric argument means to kill the characters instead of deleting them.
# #"\C-j": backward-delete-char
#
# #Delete the character under the cursor, unless the cursor is at the end of the line, in which case the character behind the cursor is deleted.
# #"\C-\'": forward-backward-delete-char
#
# # remap escape
# "jj": vi-movement-mode
#
# #"\C-[": prefix-meta
#
# # Words are composed of letters and digits.
# "\e-b": backward-word
# "\e-f": forward-word
# # Words are delimited by non-quoted shell metacharacters.
# #"\M-b": shell-backward-word
# #"\M-f": shell-forward-word
#
# # Drag the word before point past the word after point, moving point past that word as well.
# "\e-t": transpose-words
# "\C-b": backward-char
# "\C-f": forward-char
# "\e[C": forward-char
# "\e[D": backward-char
# "\C-a": beginning-of-line
# "\C-e": end-of-line
#
# # Kill from point to the end of the current word, or if between words, to the end of the next word. Word boundaries are the same as forward-word.
# "\e-k": kill-word
# # Kill the word behind point, using white space as a word boundary. The killed text is saved on the kill-ring.
# "\e-K": unix-word-rubout
#
# # Pressing tab will list all completions & select the first one. Pressing it 
# # again will cycle through available completions.  (TAB)
# TAB: menu-complete
# # Shift-TAB cycles completions backward (S-Tab)
# "\e[Z": menu-complete-backward
#
# # Edit options before rerunning previous command, eg: ls a b c -> ls -al a b c.  (C-o)
# #"\C-o": "\e-0eli "
#
# "\C-o": kill-line
#
# # Cycle thru completions.(C-b)
# #"\C-b": menu-complete
#
# # glob patterns without executing, eg: 'rm *x' (M-e)
# "\e-e": glob-expand-word
# # Perform alias expansion on the current line. (C-M-e)
# "\C-\e-e": shell-expand-line
# #Perform alias expansion on the current line. (C-M-e)
# #"\C-\M-e":  alias-expand-line
#
# #Delete letters till space from current position cursor
# #"\C-e": "\elldt a"
# #
# # Two escapes clear command line.
# "\e\e": "\e0\C-ki"
# # Clear screen and go to end of line.
# "\C-l": "\e0\C-lA"
#
# # Vim style history search (Already Default) {{{
# "\e[A": history-search-backward
# "\e[B": history-search-forward
# "\C-k": history-search-backward
# "\C-j": history-search-forward
# #}}}
#
# $endif
# #}}}
#$endif
